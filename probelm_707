class ListNode:
    def __init__(self,val):
        self.val=val
        self.next=next

class MyLinkedList:
    def __init__(self):
        self.head=None
        self.len=0

    def get(self, index: int) -> int:
        if index<0 or index>=self.len:
            return -1
        dummy=self.head
        for _ in range(index):
            dummy=dummy.next
        return dummy.val

    def addAtHead(self, val: int) -> None:
        new=ListNode(val)
        new.next=self.head
        self.head=new
        self.len+=1

    def addAtTail(self, val: int) -> None:
        new=ListNode(val)
        if self.len==0:
            self.head=new
        else:
            dummy=self.head
            for _ in range(self.len-1):
                dummy=dummy.next
            dummy.next=new
        self.len+=1
        

    def addAtIndex(self, index: int, val: int) -> None:
        if index>self.len:
            return
        if index==0:
            new=ListNode(val)
            new.next=self.head
            self.head=new
            self.len+=1
        else:
            dummy=self.head
            for _ in range(index-1):
                dummy=dummy.next
            new=ListNode(val)
            new.next=dummy.next
            dummy.next=new
            self.len+=1

    def deleteAtIndex(self, index: int) -> None:
        if index<0 or index>=self.len:
            return
        
        if index==0:
            self.head=self.head.next
            self.len-=1
        else:
            dummy=self.head
            for _ in range(index-1):
                dummy=dummy.next
            dummy.next=dummy.next.next
            self.len-=1

# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
